"""category_mcc

Revision ID: a1d7fb181137
Revises: 8f0d001e35c6
Create Date: 2024-03-24 23:53:50.157079

"""
import json
from importlib import resources
from operator import itemgetter
from typing import Sequence, Union

import sqlalchemy as sa
from alembic import op
from sqlalchemy import select

from costy.infrastructure.db.main import get_metadata
from costy.infrastructure.db.tables import create_tables

# revision identifiers, used by Alembic.
revision: str = "a1d7fb181137"
down_revision: Union[str, None] = "8f0d001e35c6"
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table("category_mcc",
    sa.Column("category_id", sa.Integer(), nullable=True),
    sa.Column("mcc", sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(["category_id"], ["categories.id"], ),
    )
    op.drop_column("categories", "mcc")
    # ### end Alembic commands ###

    with open(str(resources.files("costy.infrastructure.db") / "_default_categories.json")) as f:
        data = json.load(f)

    conn = op.get_bind()
    metadata = get_metadata()
    tables = create_tables(metadata)

    bank_category_names = {item["name"] for item in data}

    existed_bank_category_names = set(
        map(
            itemgetter(0),
            conn.execute(
                select(tables["categories"].c.name)
                .where(tables["categories"].c.kind == "general")
                .where(tables["categories"].c.name.in_(bank_category_names)),
            ),
        ),
    )

    op.bulk_insert(
        tables["categories"],
        [{
            "name": category_name,
            "kind": "general",
            "user_id": None,
        } for category_name in (bank_category_names - existed_bank_category_names)],
    )

    categories = conn.execute(
        select(tables["categories"].c.name, tables["categories"].c.id)
        .where(tables["categories"].c.kind == "general"),
    )

    data = {item["name"]: item for item in data}

    op.bulk_insert(
        tables["category_mcc"],
        [
            {
                "category_id": category_id,
                "mcc": mcc,
            }
            for category_name, category_id in categories for mcc in data[category_name].get("mcc", [])
        ],
    )


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column("categories", sa.Column("mcc", sa.INTEGER(), autoincrement=False, nullable=True))
    op.drop_table("category_mcc")
    # ### end Alembic commands ###
